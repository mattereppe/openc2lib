otupy: OpenC2 Utilities for Python
==================================

``otupy`` (/’əʊtu:paɪ/) is an open-source implementation of the OpenC2
language written in Python. 

Description
-----------

``otupy`` is explicitly designed with flexibility
and extensibility in mind, meaning that additional profiles and
actuators can be added without impacting the core library itself. For
this reason, it is particullary suited for: 

* developers that are looking for a common interface to control their remote cybersecurity functions; 
* researchers that design new profiles for cybersecurity functions; 
* system integrators that need a common language for their cybersecurity frameworks.

Usage and extension of ``otupy`` have a shallow learning curve because data
structures are explicitly designed to follow the language specification.
Differently from many other implementations publicly available,
introducing new transfer protocols, new message encoding formats, new
profiles, and new implementations of actuators does not require
modification to the core package; these extensions are easily to
introduce because they largely reflect the language specification, hence
minimal comprehension of the ``otupy`` is required to getting started.

The ``otupy`` currently provides:

* the implementation of the core functions that implement the OpenC2 Architecture and Language Specification; 
* an implementation of the json encoder; 
* an implementation of the HTTP transfer protocol; 
* the definition of the SLPF profile; 
* a dumb implementation of an actuator for the SLPF profile.

Compatibility
-------------

Python 3.9+ is required to run ``otupy`` (Python 3.11 was used for development).

Getting started
---------------

.. toctree::
   :maxdepth: 1

   background
   architecture
   download
   usage

Advanced usage
--------------

Advanced usage of the openc2lib requires knowledge of its data
structures and functions. Data structures are very straightforward to
learn, because they strictly follow the definition and requirements in
the common Language Specification and Profile extensions. 

.. toctree::
   :maxdepth: 1

   developerguide
   developingextensions
	logging







Advanced usage
--------------

Advanced usage of ``otupy`` requires knowledge of its data
structures and functions. Data structures are very straightforward to
learn, because they strictly follow the definition and requirements in
the common Language Specification and Profile extensions. See the
`Developer guide <docs/developerguide.md>`__ for a comprehensive
description of the library structure.



[comment]: <> User documentation of ``otupy`` is available
`here <docs/code/index.html>`__. User documentation of ``otupy``
code can be generated by running the following command in the root tree:

::

   pdoc src/otupy/ -o docs/code/

To view the documentation, open the ``docs/code/index.html`` in your
browser.

Extensions
----------

``otupy`` comes with several extensions and use cases: - The Context
Discovery profile and its actuators for OpenStack and Kubernetes
(documentation
`here <https://github.com/mattereppe/otupy/blob/main/docs/CTXD%20documentation.md>`__)

Support
-------

TODO

Limitations, main issues, and known bugs
----------------------------------------

Too many to be listed here! :-(

Contributing
------------

Contributions are wellcome for the implementation of the following
extensions: - encoding format beyond json (no specification available);
- transfer protocols (MQTT first); - implementation of SLPF
``Actuator``\ s for different firewall technologies (both opensource and
proprietary). - implementation of new and draft profiles.

Authors and acknowledgment
--------------------------

-  The Context Discovery profile, its actuators and use cases have been
   developed by Silvio Tanzarella.

License
-------

Licensed under the `EUPL v1.2 <https://eupl.eu/1.2/en/>`__.
